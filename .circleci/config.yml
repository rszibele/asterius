version: 2.1

jobs:
  asterius-boot:
    docker:
      - image: debian:sid
    environment:
      - ASTERIUS_BUILD_OPTIONS: -j2
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - MAKEFLAGS: -j2
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            mkdir -p ~/.local/bin
            curl -L https://github.com/commercialhaskell/stack/releases/download/v2.1.3/stack-2.1.3-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
            curl -L https://downloads.haskell.org/~cabal/cabal-install-3.0.0.0/cabal-install-3.0.0.0-x86_64-unknown-linux.tar.xz | tar xJ -C ~/.local/bin 'cabal'
      - checkout

      - run:
          name: Boot
          command: |
            git submodule update --init --recursive
            stack --no-terminal -j2 install --test --no-run-tests asterius
            stack --no-terminal exec ahc-boot

      - persist_to_workspace:
          root: /root
          paths:
            - .local
            - .stack
            - project/.stack-work
            - project/asterius/.stack-work
            - project/binaryen/.stack-work
            - project/ghc-toolkit/.stack-work
            - project/inline-js/inline-js-core/.stack-work
            - project/npm-utils/.stack-work
            - project/wabt/.stack-work
            - project/wasm-toolkit/.stack-work
            - project/stack.yaml.lock

  asterius-test:
    docker:
      - image: debian:sid
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root
      - run:
          name: Test asterius
          command: |
            stack --no-terminal test asterius:fib
            stack --no-terminal test asterius:jsffi
            stack --no-terminal test asterius:array
            stack --no-terminal test asterius:stableptr
            stack --no-terminal test asterius:rtsapi
            stack --no-terminal test asterius:teletype
            stack --no-terminal test asterius:bytearray
            stack --no-terminal test asterius:bigint
            stack --no-terminal test asterius:todomvc
            stack --no-terminal test asterius:cloudflare
            stack --no-terminal test asterius:exception
            stack --no-terminal test asterius:regression60
            stack --no-terminal test asterius:sizeof_md5context
            stack --no-terminal test asterius:largenum
            stack --no-terminal test asterius:bytearray --test-arguments="--yolo"
            stack --no-terminal test asterius:bytearray --test-arguments="--gc-threshold=128"
            stack --no-terminal test asterius:fib --test-arguments="--no-gc-sections"
            stack --no-terminal test asterius:fib --test-arguments="--backend=binaryen --no-gc-sections"

            stack --no-terminal test asterius:fib --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:jsffi --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:array --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:stableptr --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:rtsapi --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:teletype --test-arguments="--debug" > /dev/null
            # stack --no-terminal test asterius:bytearray --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:bigint --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:exception --test-arguments="--debug" > /dev/null

            stack --no-terminal test asterius:fib --test-arguments="--tail-calls"
            stack --no-terminal test asterius:fib --test-arguments="--tail-calls --no-gc-sections"

            stack --no-terminal test asterius:nomain
            stack --no-terminal test asterius:nomain --test-arguments="--tail-calls"

            stack --no-terminal test asterius:th

  asterius-test-cabal:
    docker:
      - image: debian:sid
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root
      - run:
          name: Test ahc-cabal
          command: |
            ahc-cabal new-update
            ahc-cabal new-install -j1 --installdir . \
              hello
            ahc-dist --input-exe hello --run

            cd ghc-toolkit/boot-libs
            ahc-cabal v1-install -j2 --package-db=clear --package-db=global \
              contravariant-extras

  asterius-test-ghc-testsuite:
    docker:
      - image: debian:sid
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - GHCRTS: -N2
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            node --version

      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              node --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="-j2 --timeout=180s" || true
              cp asterius/test-report.csv /tmp

      - store_artifacts:
          path: /tmp/test-report.csv

  asterius-test-ghc-testsuite-yolo:
    docker:
      - image: debian:sid
    environment:
      - ASTERIUS_GHC_TESTSUITE_OPTIONS: --yolo
      - DEBIAN_FRONTEND: noninteractive
      - GHCRTS: -N2
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            node --version

      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              node --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="-j2 --timeout=180s" || true
              cp asterius/test-report.csv /tmp

      - store_artifacts:
          path: /tmp/test-report.csv

  asterius-test-ghc-testsuite-debug:
    docker:
      - image: debian:sid
    environment:
      - ASTERIUS_GHC_TESTSUITE_OPTIONS: --debug
      - DEBIAN_FRONTEND: noninteractive
      - GHCRTS: -N2
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            node --version

      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              node --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="-j2 --timeout=180s" || true
              cp asterius/test-report.csv /tmp

      - store_artifacts:
          path: /tmp/test-report.csv

  asterius-test-ghc-testsuite-debug-yolo:
    docker:
      - image: debian:sid
    environment:
      - ASTERIUS_GHC_TESTSUITE_OPTIONS: --debug --yolo
      - DEBIAN_FRONTEND: noninteractive
      - GHCRTS: -N2
      - LANG: C.UTF-8
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            node --version

      - checkout
      - run:
          name: Initialize submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: /root

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              node --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="-j2 --timeout=180s" || true
              cp asterius/test-report.csv /tmp

      - store_artifacts:
          path: /tmp/test-report.csv

  asterius-build-wabt:
    docker:
      - image: debian:sid
    environment:
      - ASTERIUS_BUILD_OPTIONS: -j2
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - MAKEFLAGS: -j2
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              cmake \
              curl \
              g++ \
              gawk \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python \
              python3 \
              xz-utils \
              zlib1g-dev
            mkdir -p ~/.local/bin
            curl -L https://github.com/commercialhaskell/stack/releases/download/v2.1.3/stack-2.1.3-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      - checkout
      - run:
          name: Build wabt
          command: |
            git submodule update --init --recursive
            stack --no-terminal -j2 build --test --no-run-tests wabt
            stack --no-terminal exec wasm-objdump -- --help

  asterius-build-docs:
    docker:
      - image: debian:sid
    environment:
      DEBIAN_FRONTEND: noninteractive
      LANG: C.UTF-8
    steps:
      - run:
          name: Ensure we are on `tweag/asterius`
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              curl \
              git \
              gnupg \
              openssh-client \
              python3-pip
            pip3 install recommonmark sphinx
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_13.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            npm install netlify-cli -g
      - checkout
      - run:
          name: Build & push docs
          command: |
            cd docs
            sphinx-build . _build
            if [ $CIRCLE_BRANCH = "master" ]
            then
              netlify deploy --dir=_build --message="$CIRCLE_SHA1" --prod
            else
              netlify deploy --dir=_build --message="$CIRCLE_SHA1"
            fi

workflows:
  version: 2
  build:
    jobs:
      - asterius-boot
      - asterius-test:
          requires:
            - asterius-boot
      - asterius-test-cabal:
          requires:
            - asterius-boot
      - asterius-test-ghc-testsuite:
          requires:
            - asterius-boot
      - asterius-test-ghc-testsuite-yolo:
          requires:
            - asterius-boot
      - asterius-test-ghc-testsuite-debug:
          requires:
            - asterius-boot
      - asterius-test-ghc-testsuite-debug-yolo:
          requires:
            - asterius-boot
      - asterius-build-wabt
      - asterius-build-docs
